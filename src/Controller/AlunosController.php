<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Event\EventInterface;
use Dompdf\Dompdf;
use phpDocumentor\Reflection\Types\This;

/**
 * Alunos Controller
 *
 * @property \App\Model\Table\AlunosTable $Alunos
 * @method \App\Model\Entity\Aluno[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class AlunosController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->Auth->allow('add');
        $this->Auth->allow('confirmacao');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index()
    {
        if ((!empty($this->request->getQuery('turno'))) && $this->request->getQuery('turno')){
            $data = $this->request->getQueryParams();
            $alunos = $this->getTableLocator()->get('Alunos')->find();
            $alunos->where(['turno' => $data['turno']]);
            $alunos->order(['created'=>'ASC']);

            $user = $this->Auth->user();
            $alunos = $this->paginate($alunos);
            $this->set(compact('alunos'));
            $this->set(compact('user'));
        }else {
            $alunos = $this->paginate($this->Alunos);
            $this->set(compact('alunos'));
        }
    }

    public function relatorio(){
        $pdf = new \TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
        $pdf->SetCreator(PDF_CREATOR);
        $pdf->SetAuthor('Bruno Vicente');
        $pdf->SetTitle('RELATÓRIO');
        $pdf->SetSubject('Lista de Alunos');
        $pdf->SetKeywords('TCPDF, PDF, example, test, guide');

        $alunos = $this->getTableLocator()->get('Alunos')->find()
            ->where(['turno'=>'TARDE'])
            ->order(['created'=>'ASC']);
        //$alunosT = $this->getTableLocator()->get('Alunos')->find()
        //    ->where(['turno'=>'TARDE'])
        //    ->limit(20)
        //    ->order(['created'=>'ASC']);

        //$alunos = array_merge($alunosM->toArray(), $alunosT->toArray());

        $builder = $this->viewBuilder();

        // configure as needed
        $builder->setLayout('report');
        $builder->setTemplate('Alunos\relatorio');
        $builder->setHelpers(['Html']);

        // create a view instance
        $view = $builder->build(compact('alunos'));

        // render to a variable
        $output = $view->render();

        $pdf->AddPage();
        $pdf->writeHTML($output, true, false, true, false, '');
        $pdf->lastPage();

        $pdf->Output('relatorio.pdf', 'I');
    }

    public function pdf(){
        $dompdf = new Dompdf();

                // create a view instance
        $builder = $this->viewBuilder();
        $builder->setLayout('report');
        $builder->setTemplate('Alunos\relatorio');
        $builder->setHelpers(['Html']);
        $view = $builder->build();

        // render to a variable
        $output = $view->render();
        $dompdf->loadHtml($output);

        // (Optional) Setup the paper size and orientation
        $dompdf->setPaper('A4', 'landscape');

        // Render the HTML as PDF
        $dompdf->render();

        // Output the generated PDF to Browser
        $dompdf->stream();
    }

    /**
     * View method
     *
     * @param string|null $id Aluno id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $aluno = $this->Alunos->get($id, [
            'contain' => [],
        ]);

        $this->set(compact('aluno'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $this->viewBuilder()->setLayout('pagina');
        $aluno = $this->Alunos->newEmptyEntity();
        if ($this->request->is('post')) {
            $aluno = $this->Alunos->patchEntity($aluno, $this->request->getData());
            if ($this->Alunos->save($aluno)) {
                //$this->Flash->success(__('Inscrição Realizada com sucesso!.'));

                return $this->redirect(['action' => 'confirmacao']);
            }
            $this->Flash->error(__('Erro ao realizar a inscrição.'));
        }
        $this->set(compact('aluno'));
    }

    public function confirmacao(){
        $this->viewBuilder()->setLayout('pagina');
    }

    /**
     * Edit method
     *
     * @param string|null $id Aluno id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $aluno = $this->Alunos->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $aluno = $this->Alunos->patchEntity($aluno, $this->request->getData());
            if ($this->Alunos->save($aluno)) {
                $this->Flash->success(__('The aluno has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The aluno could not be saved. Please, try again.'));
        }
        $this->set(compact('aluno'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Aluno id.
     * @return \Cake\Http\Response|null|void Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $aluno = $this->Alunos->get($id);
        if ($this->Alunos->delete($aluno)) {
            $this->Flash->success(__('The aluno has been deleted.'));
        } else {
            $this->Flash->error(__('The aluno could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function inscricao($id){
        $aluno = $this->Alunos->get($id);
        $user = $this->Auth->user();
        $this->set(compact('user'));
        $this->set(compact('aluno'));

        $alunos = $this->Alunos->find('All')
            ->where(['turno' => $aluno->turno])
            ->order(['created'=>'ASC'])
            ->limit(20);
        $inscricao = 'INDEFERIDA';

        foreach ($alunos as $a){
            if($aluno->id == $a->id){
                $inscricao = 'DEFERIDA';
            }
        }
        $this->set(compact('inscricao'));
    }

    public function isAuthorized($user)
    {
        if (in_array($user['roles'], ['ADMINISTRADOR'])) {
            return true;
        } else {
            if (in_array($this->request->getParam('action'), ['view', 'inscricao'])) {
                return true;
            }
        }

        return false;
    }

}

